/**
 * This class is generated by jOOQ
 */
package com.hellokoding.jooq.model.dbo.tables.records;


import com.hellokoding.jooq.model.dbo.tables.Sysdiagrams;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record5;
import org.jooq.Record7;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SysdiagramsRecord extends UpdatableRecordImpl<SysdiagramsRecord> implements Record5<Object, Object, Object, Object, byte[]> {

    private static final long serialVersionUID = -1817928295;

    /**
     * Setter for <code>dbo.sysdiagrams.name</code>.
     */
    public void setName(Object value) {
        set(0, value);
    }

    /**
     * Getter for <code>dbo.sysdiagrams.name</code>.
     */
    public Object getName() {
        return (Object) get(0);
    }

    /**
     * Setter for <code>dbo.sysdiagrams.principal_id</code>.
     */
    public void setPrincipalId(Object value) {
        set(1, value);
    }

    /**
     * Getter for <code>dbo.sysdiagrams.principal_id</code>.
     */
    public Object getPrincipalId() {
        return (Object) get(1);
    }

    /**
     * Setter for <code>dbo.sysdiagrams.diagram_id</code>.
     */
    public void setDiagramId(Object value) {
        set(2, value);
    }

    /**
     * Getter for <code>dbo.sysdiagrams.diagram_id</code>.
     */
    public Object getDiagramId() {
        return (Object) get(2);
    }

    /**
     * Setter for <code>dbo.sysdiagrams.version</code>.
     */
    public void setVersion(Object value) {
        set(3, value);
    }

    /**
     * Getter for <code>dbo.sysdiagrams.version</code>.
     */
    public Object getVersion() {
        return (Object) get(3);
    }

    /**
     * Setter for <code>dbo.sysdiagrams.definition</code>.
     */
    public void setDefinition(byte[] value) {
        set(4, value);
    }

    /**
     * Getter for <code>dbo.sysdiagrams.definition</code>.
     */
    public byte[] getDefinition() {
        return (byte[]) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record7<Object, Object, Object, Object, Object, Object, Object> key() {
        return (Record7) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row5<Object, Object, Object, Object, byte[]> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row5<Object, Object, Object, Object, byte[]> valuesRow() {
        return (Row5) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Object> field1() {
        return Sysdiagrams.SYSDIAGRAMS.NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Object> field2() {
        return Sysdiagrams.SYSDIAGRAMS.PRINCIPAL_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Object> field3() {
        return Sysdiagrams.SYSDIAGRAMS.DIAGRAM_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Object> field4() {
        return Sysdiagrams.SYSDIAGRAMS.VERSION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<byte[]> field5() {
        return Sysdiagrams.SYSDIAGRAMS.DEFINITION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object value1() {
        return getName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object value2() {
        return getPrincipalId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object value3() {
        return getDiagramId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object value4() {
        return getVersion();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public byte[] value5() {
        return getDefinition();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SysdiagramsRecord value1(Object value) {
        setName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SysdiagramsRecord value2(Object value) {
        setPrincipalId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SysdiagramsRecord value3(Object value) {
        setDiagramId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SysdiagramsRecord value4(Object value) {
        setVersion(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SysdiagramsRecord value5(byte[] value) {
        setDefinition(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SysdiagramsRecord values(Object value1, Object value2, Object value3, Object value4, byte[] value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SysdiagramsRecord
     */
    public SysdiagramsRecord() {
        super(Sysdiagrams.SYSDIAGRAMS);
    }

    /**
     * Create a detached, initialised SysdiagramsRecord
     */
    public SysdiagramsRecord(Object name, Object principalId, Object diagramId, Object version, byte[] definition) {
        super(Sysdiagrams.SYSDIAGRAMS);

        set(0, name);
        set(1, principalId);
        set(2, diagramId);
        set(3, version);
        set(4, definition);
    }
}
